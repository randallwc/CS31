William Randall
UID: 805 167 986

A brief description of notable obstacles you overcame.

One obstacle I overcame was understanding the code given to me.  I had to thoroughly understand the predefined member functions that were given to me to be able to implement my own function definitions that would return valid/ useful results.  Furthermore, I had issues with understanding how enumerations were called and used in functions without a switch statement.  I wanted to use the enum GAMEOUTCOME in my function with the actual written out name of each enum in my if statements, and understanding how to access this enumeration was difficult because I had to be sure I was using the right path to the enum instead of just checking to see if it equaled a value.  Finally, one other challenge I faced was making sure that my functions returned what was necessary and did exactly what they needed to do to manipulate the other classes.  I would find that I returned the right value, but I did not do what the function needed to do in reference to the other classes thus making my function give incorrect values. 

A list of the test data that could be used to thoroughly test your functions, along with the reason for each test.

Die d;
Player p;
Board board, b1;
Pig game;
						//this test if the dice returns a value between 1 and 6 inclusive
for (int i = 1; i <= 100; i++ )
{
d.roll();
int value = d.getValue();
assert( value >=1 && value <= 6 );
}

						// this checks if the player header/ class works
assert(p.getScore( ) == 0 );
assert(p.getTotal( ) == 0 );
assert( p.roll( 6 ) == 6 );
assert( p.getScore() == 6 );
assert( p.roll( 5 )  == 5 );
assert( p.getScore() == 11 );
p.endTurn();
assert( p.getScore() == 0 );
assert( p.getTotal() == 11 );
assert( p.roll( 4 )  == 4 );
assert( p.getScore() == 4 );
assert( p.roll( 5 ) == 5 );
assert( p.getScore() == 9 );
assert( p.roll( 6 )  == 6 );
assert( p.getScore() == 15 );
p.endTurn();
assert( p.getScore() == 0 );
assert( p.getTotal() == 26 );
assert( p.roll( 4 ) == 4 );
assert( p.getScore() == 4 );
assert( p.roll( 5 ) == 5 );
assert( p.getScore() == 9 );
assert( p.roll( 1 ) == 1 );
assert( p.getScore() == 0 );
assert( p.getTotal() == 26 );


						//this checks if the board header/class works
assert( board.getComputerTotal() == 0 );
assert( board.getHumanTotal() == 0);
assert( board.getRolledValue() == 0);
assert( board.getComputerScore() == 0 );
assert( board.getHumanScore() == 0);
assert( board.isHumanWinner() == false );
assert( board.isHumanTurn() == true );
assert( board.isGameOver() == false );
board.setComputerTurn();
board.setComputerTotal(1);
board.setComputerScore(2);
board.setHumanTurn();
board.setHumanScore(3);
board.setHumanTotal(4);
board.setRolledValue(7);
assert( board.getComputerTotal() == 1 );
assert( board.getHumanTotal() == 4);
assert( board.getRolledValue() == 7);
assert( board.getComputerScore() == 2 );
assert( board.getHumanScore() == 3);
assert( board.isHumanWinner() == false );
assert( board.isHumanTurn() == true );
assert( board.isGameOver() == false );
b1.setComputerTurn();
b1.setComputerTotal(21);
b1.setComputerScore(22);
b1.setHumanTurn();

b1.setComputerTotal( 50 );
b1.setComputerScore( 50 );
assert( b1.getComputerTotal() == 21 );
assert( b1.getComputerScore() == 22 );
b1.setHumanScore(23);
b1.setHumanTotal(24);
b1.setRolledValue(27);
b1.setRolledValue(250);
b1.setGameOver(true);
b1.markComputerAsWinner();
assert( b1.getComputerTotal() == 21 );
assert( b1.getHumanTotal() == 24);
assert( b1.getRolledValue() == 250);
assert( b1.getComputerScore() == 22 );
assert( b1.getHumanScore() == 23);
assert( b1.isHumanWinner() == false );
assert( b1.isHumanTurn() == true );
assert( b1.isGameOver() == true );

b1.setComputerTurn();
b1.setComputerTotal( 50 );
b1.setComputerScore( 50 );
b1.setRolledValue( 50 );
assert( b1.getComputerTotal( ) == 21 );
assert( b1.getComputerScore( ) == 22 );
assert( b1.getRolledValue( ) == 250 );


								//this checks if the Pig header/class works
assert( game.isGameOver() == false );
assert( game.determineGameOutcome() == Pig::GAMEOUTCOME::GAMENOTOVER );
game.humanPlay( 5 );
game.humanEndTurn( );
game.computerPlay( 5 );
game.computerEndTurn( );
assert( game.isGameOver() == false );
assert( game.determineGameOutcome() == Pig::GAMEOUTCOME::GAMENOTOVER );
game.humanPlay( 5 );
game.humanPlay( 5 );
game.humanPlay( 5 );
game.humanEndTurn( );
assert( game.isGameOver() == false );
assert( game.determineGameOutcome() == Pig::GAMEOUTCOME::GAMENOTOVER );
game.computerPlay( 5 );
game.computerPlay( 5 );
game.computerPlay( 5 );

game.computerEndTurn( );

assert( game.isGameOver() == false );
assert( game.determineGameOutcome() == Pig::GAMEOUTCOME::GAMENOTOVER );
game.humanPlay( 5 );
game.humanPlay( 6 );
game.humanEndTurn( );
assert( game.isGameOver() == true );
assert( game.determineGameOutcome() == Pig::GAMEOUTCOME::HUMANWONGAME );

game.computerPlay( 6 );
game.computerPlay( 6 );
game.computerPlay( 6 );
game.computerEndTurn( );
assert( game.isGameOver() == true );
assert( game.determineGameOutcome() == Pig::GAMEOUTCOME::HUMANWONGAME );